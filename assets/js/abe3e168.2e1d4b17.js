"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[477],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),p=o,h=m["".concat(c,".").concat(p)]||m[p]||u[p]||i;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3348:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return d},default:function(){return m}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:5},c="Observing changes",s={unversionedId:"tutorial/observing-changes",id:"tutorial/observing-changes",isDocsHomePage:!1,title:"Observing changes",description:"When you add a new item to the list, you want to see that item immediately be populated in the list.",source:"@site/docs/tutorial/observing-changes.md",sourceDirName:"tutorial",slug:"/tutorial/observing-changes",permalink:"/docs/docs/tutorial/observing-changes",editUrl:"https://github.com/automerge/docs/edit/main/docs/tutorial/observing-changes.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Make a Change",permalink:"/docs/docs/tutorial/make-a-change"},next:{title:"Save and Load",permalink:"/docs/docs/tutorial/save-and-load"}},d=[{value:"Automerge.Observer",id:"automergeobserver",children:[],level:2},{value:"Object ids",id:"object-ids",children:[],level:2},{value:"Exercise",id:"exercise",children:[],level:2}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"observing-changes"},"Observing changes"),(0,i.kt)("p",null,"When you add a new item to the list, you want to see that item immediately be populated in the list."),(0,i.kt)("p",null,"Let's render the items in our todo list:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<div id="todo-list">\n</div>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let list = document.querySelector(\"#todo-list\")\n\nfunction render (doc) {\n    doc.items && doc.items.forEach((item, index) => {\n        let itemEl = document.createElement('li')\n        itemEl.innerHTML = item.value\n        itemEl.style = item.done ? 'text-decoration: line-through' : ''\n    })\n}\n")),(0,i.kt)("p",null,"But there's a problem: every time you add an item to the list, it doesn't update the list dynamically. So, we need to ",(0,i.kt)("em",{parentName:"p"},"observe")," or ",(0,i.kt)("em",{parentName:"p"},"subsribe")," to changes, so that we can re-render the user interface every time a change is made to the document. For this, we use an ",(0,i.kt)("inlineCode",{parentName:"p"},"Automerge.Observer"),"."),(0,i.kt)("h2",{id:"automergeobserver"},"Automerge.Observer"),(0,i.kt)("p",null,"An observer is created separate from the document, and is passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"Automerge.init"),". "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let observer = Automerge.Observer()\nlet doc = Automerge.init({ observer })\n")),(0,i.kt)("p",null,"We can then use the observer to watch for changes, and re-render the user interface with the new document state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"observer.observe(doc, (diff, before, after, local, changes) => {\n    // after is the new document state!\n    render(after)\n})\n")),(0,i.kt)("p",null,"The observer callback is called before the ",(0,i.kt)("inlineCode",{parentName:"p"},"doc")," is changed. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," for rendering the new state of the app."),(0,i.kt)("p",null,"You can also apply observables to properties on the Automerge document."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"observable.observe(doc.items, (diff, before, after, local, changes) => {\n  // before == '[]'\n  // after == '['Cat food']'\n})\n\ndoc = Automerge.change(doc, doc => doc.items.push('Cat food'))\n")),(0,i.kt)("h2",{id:"object-ids"},"Object ids"),(0,i.kt)("p",null,"Now, every time you add an item, the list should refresh and add it to the list. To do this, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"Automerge.getObjectId"),". Every property, or object, on the Automerge document is given it's own unique identifier which can be helpful for making sure we only render each object once."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let list = document.querySelector(\"#todo-list\")\n\nfunction render (doc) {\n    doc.items && doc.items.forEach((item, index) => {\n\n        // the object id is unique\n        let objId = Automerge.getObjectId(item)\n        let itemEl = document.getElementById(objId)\n\n        if (!itemEl) {\n            itemEl = document.createElement('li')\n            itemEl.innerHTML = item.value\n\n            // give the item the object id so we only add it to the DOM once\n            itemEl.setAttribute(\"id\", objId)\n            itemsDiv.appendChild(itemEl)\n        }\n\n        // if the item is marked done, show it with a strikethrough\n        itemEl.style = item.done ? 'text-decoration: line-through' : ''\n    })\n}\n")),(0,i.kt)("h2",{id:"exercise"},"Exercise"),(0,i.kt)("p",null,"Now, your turn. Write the next function we will need: to mark a todo as complete\n(or incomplete). To do this, we need the index of the todo item in the list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function toggle (doc, index) {\n  return Automerge.change(doc, (doc) => {\n    // your code here\n  });\n}\n")),(0,i.kt)("p",null,"Then, attach this function to the DOM ",(0,i.kt)("inlineCode",{parentName:"p"},"itemEl.onclick")," event."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Hints")),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"doc.items[index]")," to get the value of the item in the list. This value can be manipulated."),(0,i.kt)("p",null,"You cannot use ",(0,i.kt)("inlineCode",{parentName:"p"},"...")," to create changes to Automerge documents. For example, the following ",(0,i.kt)("strong",{parentName:"p"},"will not work"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Automerge.change(doc, doc => {\n  doc.items = [...doc.items, toggeledItem]\n})\n")))}m.isMDXComponent=!0}}]);