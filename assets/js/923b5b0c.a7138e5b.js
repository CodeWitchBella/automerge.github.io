"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[387],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return m}});var n=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(o),m=a,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return o?n.createElement(h,i(i({ref:t},d),{},{components:o})):n.createElement(h,i({ref:t},d))}));function m(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=o[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},7578:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var n=o(7462),a=o(3366),r=(o(7294),o(3905)),i=["components"],l={sidebar_position:6},s="Save and Load",c={unversionedId:"tutorial/save-and-load",id:"tutorial/save-and-load",isDocsHomePage:!1,title:"Save and Load",description:"One of the most important things people expect in an app is that if they refresh the browser tab, their todo list won't disappear. To do this, we must serialize the Automerge document into a format that can be saved on disk. You could use anything, from localStorage to MongoDB to the filesystem to store these Automerge binaries.",source:"@site/docs/tutorial/save-and-load.md",sourceDirName:"tutorial",slug:"/tutorial/save-and-load",permalink:"/docs/docs/tutorial/save-and-load",editUrl:"https://github.com/automerge/docs/edit/main/docs/tutorial/save-and-load.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Observing changes",permalink:"/docs/docs/tutorial/observing-changes"},next:{title:"Multi-user apps",permalink:"/docs/docs/tutorial/sync-changes"}},d=[{value:"Add localforage",id:"add-localforage",children:[],level:2},{value:"Document Ids",id:"document-ids",children:[],level:2},{value:"Load",id:"load",children:[],level:2},{value:"Save",id:"save",children:[],level:2},{value:"Exercise",id:"exercise",children:[],level:2}],u={toc:d};function p(e){var t=e.components,o=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"save-and-load"},"Save and Load"),(0,r.kt)("p",null,"One of the most important things people expect in an app is that if they refresh the browser tab, their todo list won't disappear. To do this, we must serialize the Automerge document into a format that can be saved on disk. You could use anything, from localStorage to MongoDB to the filesystem to store these Automerge binaries."),(0,r.kt)("p",null,"In this example, we will use ",(0,r.kt)("a",{parentName:"p",href:"https://localforage.github.io/localForage/"},"localforage"),", a cross-browser polyfill that makes it easy to store binary arrays in the browser."),(0,r.kt)("h2",{id:"add-localforage"},"Add localforage"),(0,r.kt)("p",null,"First, add the script tag for ",(0,r.kt)("a",{parentName:"p",href:"https://localforage.github.io/localForage/"},"localforage")," to your index.html:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script \n    type="application/javascript" \n    src="https://raw.githubusercontent.com/mozilla/localForage/master/dist/localforage.min.js">\n<\/script>\n')),(0,r.kt)("h2",{id:"document-ids"},"Document Ids"),(0,r.kt)("p",null,"Until now, your application has only one document. Now, you can assign a document id to retrieve the todo list and have multiple todo lists. This document id can be saved and transmitted in the URL of the website."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let docId = window.location.hash\n")),(0,r.kt)("p",null,"We can access the hash in the browser client as a unique identifier. For example, if you want to make a new todo list called 'groceries', the URL would be:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8080/#groceries")," "),(0,r.kt)("p",null,"In a production app, you will probably want to use randomly generated UUIDs, becuase it's more secure. However, having a user-generated id is fine for our prototype."),(0,r.kt)("h2",{id:"load"},"Load"),(0,r.kt)("p",null,"When a document loads, you can check to see if you have a copy of that document id locally before initializing a new Automerge document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let docId = window.location.hash\nlet binary = await localforage.getItem(docId)\n\nif (binary) {\n    doc = Automerge.load(binary);\n} else {\n    doc = Automerge.init()\n}\n")),(0,r.kt)("h2",{id:"save"},"Save"),(0,r.kt)("p",null,"Every time the document changes, we can save the document using this pattern:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let docId = window.location.hash\nlet binary = Automerge.save(doc)\nlocalforage.setItem(docId, doc).catch(err)\n")),(0,r.kt)("h2",{id:"exercise"},"Exercise"),(0,r.kt)("p",null,"Every time the document is changed, save it in localforage. You can do this by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"Automerge.save")," as part of the callback to ",(0,r.kt)("inlineCode",{parentName:"p"},"observer.observe(doc, cb)"),"."),(0,r.kt)("p",null,"You'll know you did it correctly if you can add some items to the list and refresh the browser, and the items don't disappear."))}p.isMDXComponent=!0}}]);