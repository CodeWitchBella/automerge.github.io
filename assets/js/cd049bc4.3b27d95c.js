"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5445],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),o=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=o(a),k=r,h=s["".concat(d,".").concat(k)]||s[k]||c[k]||l;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[s]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5680:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const l={id:"index",title:"@automerge/automerge",sidebar_label:"Overview",sidebar_position:.5,custom_edit_url:null},i="Automerge",p={unversionedId:"tsapi/index",id:"tsapi/index",isDocsHomePage:!1,title:"@automerge/automerge",description:"This library provides the core automerge data structure and sync algorithms.",source:"@site/docs/tsapi/index.md",sourceDirName:"tsapi",slug:"/tsapi/index",permalink:"/docs/tsapi/index",editUrl:null,tags:[],version:"current",sidebarPosition:.5,frontMatter:{id:"index",title:"@automerge/automerge",sidebar_label:"Overview",sidebar_position:.5,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Sync Protocol",permalink:"/docs/how-it-works/sync"},next:{title:"unstable",permalink:"/docs/tsapi/namespaces/unstable"}},d=[{value:"Creating and modifying a document",id:"creating-and-modifying-a-document",children:[],level:2},{value:"Applying changes from another document",id:"applying-changes-from-another-document",children:[],level:2},{value:"Saving and loading documents",id:"saving-and-loading-documents",children:[],level:2},{value:"Viewing different versions of a document",id:"viewing-different-versions-of-a-document",children:[],level:2},{value:"Syncing",id:"syncing",children:[],level:2},{value:"Conflicts",id:"conflicts",children:[],level:2},{value:"Actor IDs",id:"actor-ids",children:[],level:2},{value:"Listening to patches",id:"listening-to-patches",children:[],level:2},{value:"Cloning",id:"cloning",children:[],level:2},{value:"The unstable module",id:"the-unstable-module",children:[],level:2},{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Interfaces",id:"interfaces",children:[],level:2},{value:"References",id:"references",children:[{value:"Counter",id:"counter",children:[],level:3},{value:"DelPatch",id:"delpatch",children:[],level:3},{value:"Doc",id:"doc",children:[],level:3},{value:"Float64",id:"float64",children:[],level:3},{value:"IncPatch",id:"incpatch",children:[],level:3},{value:"InsertPatch",id:"insertpatch",children:[],level:3},{value:"Int",id:"int",children:[],level:3},{value:"Patch",id:"patch",children:[],level:3},{value:"PatchCallback",id:"patchcallback",children:[],level:3},{value:"PutPatch",id:"putpatch",children:[],level:3},{value:"SpliceTextPatch",id:"splicetextpatch",children:[],level:3},{value:"SyncMessage",id:"syncmessage",children:[],level:3},{value:"Uint",id:"uint",children:[],level:3}],level:2},{value:"Type Aliases",id:"type-aliases",children:[{value:"ActorId",id:"actorid",children:[{value:"Defined in",id:"defined-in",children:[],level:4}],level:3},{value:"ApplyOptions",id:"applyoptions",children:[{value:"Type parameters",id:"type-parameters",children:[],level:4},{value:"Type declaration",id:"type-declaration",children:[],level:4},{value:"Defined in",id:"defined-in-1",children:[],level:4}],level:3},{value:"AutomergeValue",id:"automergevalue",children:[{value:"Defined in",id:"defined-in-2",children:[],level:4}],level:3},{value:"Change",id:"change",children:[{value:"Defined in",id:"defined-in-3",children:[],level:4}],level:3},{value:"ChangeFn",id:"changefn",children:[{value:"Type parameters",id:"type-parameters-1",children:[],level:4},{value:"Type declaration",id:"type-declaration-1",children:[{value:"Parameters",id:"parameters",children:[],level:5},{value:"Returns",id:"returns",children:[],level:5}],level:4},{value:"Defined in",id:"defined-in-4",children:[],level:4}],level:3},{value:"ChangeOptions",id:"changeoptions",children:[{value:"Type parameters",id:"type-parameters-2",children:[],level:4},{value:"Type declaration",id:"type-declaration-2",children:[],level:4},{value:"Defined in",id:"defined-in-5",children:[],level:4}],level:3},{value:"Conflicts",id:"conflicts-1",children:[{value:"Index signature",id:"index-signature",children:[],level:4},{value:"Defined in",id:"defined-in-6",children:[],level:4}],level:3},{value:"DecodedChange",id:"decodedchange",children:[{value:"Type declaration",id:"type-declaration-3",children:[],level:4},{value:"Defined in",id:"defined-in-7",children:[],level:4}],level:3},{value:"DecodedSyncMessage",id:"decodedsyncmessage",children:[{value:"Type declaration",id:"type-declaration-4",children:[],level:4},{value:"Defined in",id:"defined-in-8",children:[],level:4}],level:3},{value:"Extend",id:"extend",children:[{value:"Type parameters",id:"type-parameters-3",children:[],level:4},{value:"Defined in",id:"defined-in-9",children:[],level:4}],level:3},{value:"Heads",id:"heads",children:[{value:"Defined in",id:"defined-in-10",children:[],level:4}],level:3},{value:"InitOptions",id:"initoptions",children:[{value:"Type parameters",id:"type-parameters-4",children:[],level:4},{value:"Type declaration",id:"type-declaration-5",children:[],level:4},{value:"Defined in",id:"defined-in-11",children:[],level:4}],level:3},{value:"MaterializeValue",id:"materializevalue",children:[{value:"Defined in",id:"defined-in-12",children:[],level:4}],level:3},{value:"ObjID",id:"objid",children:[{value:"Defined in",id:"defined-in-13",children:[],level:4}],level:3},{value:"Prop",id:"prop",children:[{value:"Defined in",id:"defined-in-14",children:[],level:4}],level:3},{value:"ScalarValue",id:"scalarvalue",children:[{value:"Defined in",id:"defined-in-15",children:[],level:4}],level:3}],level:2},{value:"Variables",id:"variables",children:[{value:"uuid",id:"uuid",children:[{value:"Defined in",id:"defined-in-16",children:[],level:4}],level:3}],level:2},{value:"Functions",id:"functions",children:[{value:"applyChanges",id:"applychanges",children:[{value:"Type parameters",id:"type-parameters-5",children:[],level:4},{value:"Parameters",id:"parameters-1",children:[],level:4},{value:"Returns",id:"returns-1",children:[],level:4},{value:"Defined in",id:"defined-in-17",children:[],level:4}],level:3},{value:"change",id:"change-1",children:[{value:"Type parameters",id:"type-parameters-6",children:[],level:4},{value:"Parameters",id:"parameters-2",children:[],level:4},{value:"Returns",id:"returns-2",children:[],level:4},{value:"Defined in",id:"defined-in-18",children:[],level:4}],level:3},{value:"clone",id:"clone",children:[{value:"Type parameters",id:"type-parameters-7",children:[],level:4},{value:"Parameters",id:"parameters-3",children:[],level:4},{value:"Returns",id:"returns-3",children:[],level:4},{value:"Defined in",id:"defined-in-19",children:[],level:4}],level:3},{value:"emptyChange",id:"emptychange",children:[{value:"Type parameters",id:"type-parameters-8",children:[],level:4},{value:"Parameters",id:"parameters-4",children:[],level:4},{value:"Returns",id:"returns-4",children:[],level:4},{value:"Defined in",id:"defined-in-20",children:[],level:4}],level:3},{value:"free",id:"free",children:[{value:"Type parameters",id:"type-parameters-9",children:[],level:4},{value:"Parameters",id:"parameters-5",children:[],level:4},{value:"Returns",id:"returns-5",children:[],level:4},{value:"Defined in",id:"defined-in-21",children:[],level:4}],level:3},{value:"from",id:"from",children:[{value:"Type parameters",id:"type-parameters-10",children:[],level:4},{value:"Parameters",id:"parameters-6",children:[],level:4},{value:"Returns",id:"returns-6",children:[],level:4},{value:"Defined in",id:"defined-in-22",children:[],level:4}],level:3},{value:"getActorId",id:"getactorid",children:[{value:"Type parameters",id:"type-parameters-11",children:[],level:4},{value:"Parameters",id:"parameters-7",children:[],level:4},{value:"Returns",id:"returns-7",children:[],level:4},{value:"Defined in",id:"defined-in-23",children:[],level:4}],level:3},{value:"getAllChanges",id:"getallchanges",children:[{value:"Type parameters",id:"type-parameters-12",children:[],level:4},{value:"Parameters",id:"parameters-8",children:[],level:4},{value:"Returns",id:"returns-8",children:[],level:4},{value:"Defined in",id:"defined-in-24",children:[],level:4}],level:3},{value:"getChanges",id:"getchanges",children:[{value:"Type parameters",id:"type-parameters-13",children:[],level:4},{value:"Parameters",id:"parameters-9",children:[],level:4},{value:"Returns",id:"returns-9",children:[],level:4},{value:"Defined in",id:"defined-in-25",children:[],level:4}],level:3},{value:"getConflicts",id:"getconflicts",children:[{value:"Type parameters",id:"type-parameters-14",children:[],level:4},{value:"Parameters",id:"parameters-10",children:[],level:4},{value:"Returns",id:"returns-10",children:[],level:4},{value:"Defined in",id:"defined-in-26",children:[],level:4}],level:3},{value:"getHeads",id:"getheads",children:[{value:"Type parameters",id:"type-parameters-15",children:[],level:4},{value:"Parameters",id:"parameters-11",children:[],level:4},{value:"Returns",id:"returns-11",children:[],level:4},{value:"Defined in",id:"defined-in-27",children:[],level:4}],level:3},{value:"getLastLocalChange",id:"getlastlocalchange",children:[{value:"Type parameters",id:"type-parameters-16",children:[],level:4},{value:"Parameters",id:"parameters-12",children:[],level:4},{value:"Returns",id:"returns-12",children:[],level:4},{value:"Defined in",id:"defined-in-28",children:[],level:4}],level:3},{value:"getMissingDeps",id:"getmissingdeps",children:[{value:"Type parameters",id:"type-parameters-17",children:[],level:4},{value:"Parameters",id:"parameters-13",children:[],level:4},{value:"Returns",id:"returns-13",children:[],level:4},{value:"Defined in",id:"defined-in-29",children:[],level:4}],level:3},{value:"getObjectId",id:"getobjectid",children:[{value:"Parameters",id:"parameters-14",children:[],level:4},{value:"Returns",id:"returns-14",children:[],level:4},{value:"Defined in",id:"defined-in-30",children:[],level:4}],level:3},{value:"init",id:"init",children:[{value:"Type parameters",id:"type-parameters-18",children:[],level:4},{value:"Parameters",id:"parameters-15",children:[],level:4},{value:"Returns",id:"returns-15",children:[],level:4},{value:"Defined in",id:"defined-in-31",children:[],level:4}],level:3},{value:"isAutomerge",id:"isautomerge",children:[{value:"Parameters",id:"parameters-16",children:[],level:4},{value:"Returns",id:"returns-16",children:[],level:4},{value:"Defined in",id:"defined-in-32",children:[],level:4}],level:3},{value:"load",id:"load",children:[{value:"Type parameters",id:"type-parameters-19",children:[],level:4},{value:"Parameters",id:"parameters-17",children:[],level:4},{value:"Returns",id:"returns-17",children:[],level:4},{value:"Defined in",id:"defined-in-33",children:[],level:4}],level:3},{value:"loadIncremental",id:"loadincremental",children:[{value:"Type parameters",id:"type-parameters-20",children:[],level:4},{value:"Parameters",id:"parameters-18",children:[],level:4},{value:"Returns",id:"returns-18",children:[],level:4},{value:"Defined in",id:"defined-in-34",children:[],level:4}],level:3},{value:"merge",id:"merge",children:[{value:"Type parameters",id:"type-parameters-21",children:[],level:4},{value:"Parameters",id:"parameters-19",children:[],level:4},{value:"Returns",id:"returns-19",children:[],level:4},{value:"Defined in",id:"defined-in-35",children:[],level:4}],level:3},{value:"save",id:"save",children:[{value:"Type parameters",id:"type-parameters-22",children:[],level:4},{value:"Parameters",id:"parameters-20",children:[],level:4},{value:"Returns",id:"returns-20",children:[],level:4},{value:"Defined in",id:"defined-in-36",children:[],level:4}],level:3},{value:"view",id:"view",children:[{value:"Type parameters",id:"type-parameters-23",children:[],level:4},{value:"Parameters",id:"parameters-21",children:[],level:4},{value:"Returns",id:"returns-21",children:[],level:4},{value:"Defined in",id:"defined-in-37",children:[],level:4}],level:3}],level:2},{value:"sync",id:"sync",children:[{value:"decodeSyncState",id:"decodesyncstate",children:[{value:"Parameters",id:"parameters-22",children:[],level:4},{value:"Returns",id:"returns-22",children:[],level:4},{value:"Defined in",id:"defined-in-38",children:[],level:4}],level:3},{value:"encodeSyncState",id:"encodesyncstate",children:[{value:"Parameters",id:"parameters-23",children:[],level:4},{value:"Returns",id:"returns-23",children:[],level:4},{value:"Defined in",id:"defined-in-39",children:[],level:4}],level:3},{value:"generateSyncMessage",id:"generatesyncmessage",children:[{value:"Type parameters",id:"type-parameters-24",children:[],level:4},{value:"Parameters",id:"parameters-24",children:[],level:4},{value:"Returns",id:"returns-24",children:[],level:4},{value:"Defined in",id:"defined-in-40",children:[],level:4}],level:3},{value:"initSyncState",id:"initsyncstate",children:[{value:"Returns",id:"returns-25",children:[],level:4},{value:"Defined in",id:"defined-in-41",children:[],level:4}],level:3},{value:"receiveSyncMessage",id:"receivesyncmessage",children:[{value:"Type parameters",id:"type-parameters-25",children:[],level:4},{value:"Parameters",id:"parameters-25",children:[],level:4},{value:"Returns",id:"returns-26",children:[],level:4},{value:"Defined in",id:"defined-in-42",children:[],level:4}],level:3}],level:2}],o={toc:d},m="wrapper";function s(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"automerge"},"Automerge"),(0,r.kt)("p",null,"This library provides the core automerge data structure and sync algorithms.\nOther libraries can be built on top of this one which provide IO and\npersistence."),(0,r.kt)("p",null,"An automerge document can be though of an immutable POJO (plain old javascript\nobject) which ",(0,r.kt)("inlineCode",{parentName:"p"},"automerge")," tracks the history of, allowing it to be merged with\nany other automerge document."),(0,r.kt)("h2",{id:"creating-and-modifying-a-document"},"Creating and modifying a document"),(0,r.kt)("p",null,"You can create a document with ",(0,r.kt)("a",{parentName:"p",href:"#init"},"init")," or ",(0,r.kt)("a",{parentName:"p",href:"#from"},"from")," and then make\nchanges to it with ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change"),", you can merge two documents with ",(0,r.kt)("a",{parentName:"p",href:"#merge"},"merge"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as automerge from "@automerge/automerge"\n\ntype DocType = {ideas: Array<automerge.Text>}\n\nlet doc1 = automerge.init<DocType>()\ndoc1 = automerge.change(doc1, d => {\n    d.ideas = [new automerge.Text("an immutable document")]\n})\n\nlet doc2 = automerge.init<DocType>()\ndoc2 = automerge.merge(doc2, automerge.clone(doc1))\ndoc2 = automerge.change<DocType>(doc2, d => {\n    d.ideas.push(new automerge.Text("which records it\'s history"))\n})\n\n// Note the `automerge.clone` call, see the "cloning" section of this readme for\n// more detail\ndoc1 = automerge.merge(doc1, automerge.clone(doc2))\ndoc1 = automerge.change(doc1, d => {\n    d.ideas[0].deleteAt(13, 8)\n    d.ideas[0].insertAt(13, "object")\n})\n\nlet doc3 = automerge.merge(doc1, doc2)\n// doc3 is now {ideas: ["an immutable object", "which records it\'s history"]}\n')),(0,r.kt)("h2",{id:"applying-changes-from-another-document"},"Applying changes from another document"),(0,r.kt)("p",null,"You can get a representation of the result of the last ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change")," you made\nto a document with ",(0,r.kt)("a",{parentName:"p",href:"#getlastlocalchange"},"getLastLocalChange")," and you can apply that change to\nanother document using ",(0,r.kt)("a",{parentName:"p",href:"#applychanges"},"applyChanges"),"."),(0,r.kt)("p",null,"If you need to get just the changes which are in one document but not in another\nyou can use ",(0,r.kt)("a",{parentName:"p",href:"#getheads"},"getHeads")," to get the heads of the document without the\nchanges and then ",(0,r.kt)("a",{parentName:"p",href:"#getmissingdeps"},"getMissingDeps"),", passing the result of ",(0,r.kt)("a",{parentName:"p",href:"#getheads"},"getHeads"),"\non the document with the changes."),(0,r.kt)("h2",{id:"saving-and-loading-documents"},"Saving and loading documents"),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{parentName:"p",href:"#save"},"save")," a document to generate a compresed binary representation of\nthe document which can be loaded with ",(0,r.kt)("a",{parentName:"p",href:"#load"},"load"),". If you have a document which\nyou have recently made changes to you can generate recent changes with saveIncremental, this will generate all the changes since you last called\n",(0,r.kt)("inlineCode",{parentName:"p"},"saveIncremental"),", the changes generated can be applied to another document with\n",(0,r.kt)("a",{parentName:"p",href:"#loadincremental"},"loadIncremental"),"."),(0,r.kt)("h2",{id:"viewing-different-versions-of-a-document"},"Viewing different versions of a document"),(0,r.kt)("p",null,"Occasionally you may wish to explicitly step to a different point in a document\nhistory. One common reason to do this is if you need to obtain a set of changes\nwhich take the document from one state to another in order to send those changes\nto another peer (or to save them somewhere). You can use ",(0,r.kt)("a",{parentName:"p",href:"#view"},"view")," to do this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import * as automerge from "@automerge/automerge"\nimport * as assert from "assert"\n\nlet doc = automerge.from({\n  key1: "value1",\n})\n\n// Make a clone of the document at this point, maybe this is actually on another\n// peer.\nlet doc2 = automerge.clone < any > doc\n\nlet heads = automerge.getHeads(doc)\n\ndoc =\n  automerge.change <\n  any >\n  (doc,\n  d => {\n    d.key2 = "value2"\n  })\n\ndoc =\n  automerge.change <\n  any >\n  (doc,\n  d => {\n    d.key3 = "value3"\n  })\n\n// At this point we\'ve generated two separate changes, now we want to send\n// just those changes to someone else\n\n// view is a cheap reference based copy of a document at a given set of heads\nlet before = automerge.view(doc, heads)\n\n// This view doesn\'t show the last two changes in the document state\nassert.deepEqual(before, {\n  key1: "value1",\n})\n\n// Get the changes to send to doc2\nlet changes = automerge.getChanges(before, doc)\n\n// Apply the changes at doc2\ndoc2 = automerge.applyChanges < any > (doc2, changes)[0]\nassert.deepEqual(doc2, {\n  key1: "value1",\n  key2: "value2",\n  key3: "value3",\n})\n')),(0,r.kt)("p",null,"If you have a ",(0,r.kt)("a",{parentName:"p",href:"#view"},"view")," of a document which you want to make changes to you\ncan ",(0,r.kt)("a",{parentName:"p",href:"#clone"},"clone")," the viewed document."),(0,r.kt)("h2",{id:"syncing"},"Syncing"),(0,r.kt)("p",null,"The sync protocol is stateful. This means that we start by creating a ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")," for each peer we are communicating with using ",(0,r.kt)("a",{parentName:"p",href:"#initsyncstate"},"initSyncState"),".\nThen we generate a message to send to the peer by calling ",(0,r.kt)("a",{parentName:"p",href:"#generatesyncmessage"},"generateSyncMessage"),". When we receive a message from the peer we call ",(0,r.kt)("a",{parentName:"p",href:"#receivesyncmessage"},"receiveSyncMessage"),". Here's a simple example of a loop which just keeps two\npeers in sync."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"let sync1 = automerge.initSyncState()\nlet msg: Uint8Array | null\n;[sync1, msg] = automerge.generateSyncMessage(doc1, sync1)\n\nwhile (true) {\n  if (msg != null) {\n    network.send(msg)\n  }\n  let resp: Uint8Array =\n    (network.receive()[(doc1, sync1, _ignore)] =\n    automerge.receiveSyncMessage(doc1, sync1, resp)[(sync1, msg)] =\n      automerge.generateSyncMessage(doc1, sync1))\n}\n")),(0,r.kt)("h2",{id:"conflicts"},"Conflicts"),(0,r.kt)("p",null,"The only time conflicts occur in automerge documents is in concurrent\nassignments to the same key in an object. In this case automerge\ndeterministically chooses an arbitrary value to present to the application but\nyou can examine the conflicts using ",(0,r.kt)("a",{parentName:"p",href:"#getconflicts"},"getConflicts"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import * as automerge from "@automerge/automerge"\n\ntype Profile = {\n    pets: Array<{name: string, type: string}>\n}\n\nlet doc1 = automerge.init<Profile>("aaaa")\ndoc1 = automerge.change(doc1, d => {\n    d.pets = [{name: "Lassie", type: "dog"}]\n})\nlet doc2 = automerge.init<Profile>("bbbb")\ndoc2 = automerge.merge(doc2, automerge.clone(doc1))\n\ndoc2 = automerge.change(doc2, d => {\n    d.pets[0].name = "Beethoven"\n})\n\ndoc1 = automerge.change(doc1, d => {\n    d.pets[0].name = "Babe"\n})\n\nconst doc3 = automerge.merge(doc1, doc2)\n\n// Note that here we pass `doc3.pets`, not `doc3`\nlet conflicts = automerge.getConflicts(doc3.pets[0], "name")\n\n// The two conflicting values are the keys of the conflicts object\nassert.deepEqual(Object.values(conflicts), ["Babe", Beethoven"])\n')),(0,r.kt)("h2",{id:"actor-ids"},"Actor IDs"),(0,r.kt)("p",null,"By default automerge will generate a random actor ID for you, but most methods\nfor creating a document allow you to set the actor ID. You can get the actor ID\nassociated with the document by calling ",(0,r.kt)("a",{parentName:"p",href:"#getactorid"},"getActorId"),". Actor IDs must not\nbe used in concurrent threads of executiong - all changes by a given actor ID\nare expected to be sequential."),(0,r.kt)("h2",{id:"listening-to-patches"},"Listening to patches"),(0,r.kt)("p",null,"Sometimes you want to respond to changes made to an automerge document. In this\ncase you can use the ",(0,r.kt)("a",{parentName:"p",href:"#patchcallback"},"PatchCallback")," type to receive notifications when\nchanges have been made."),(0,r.kt)("h2",{id:"cloning"},"Cloning"),(0,r.kt)("p",null,"Currently you cannot make mutating changes (i.e. call ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change"),") to a\ndocument which you have two pointers to. For example, in this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let doc1 = automerge.init()\nlet doc2 = automerge.change(doc1, d => (d.key = "value"))\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"doc1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"doc2")," are both pointers to the same state. Any attempt to call\nmutating methods on ",(0,r.kt)("inlineCode",{parentName:"p"},"doc1")," will now result in an error like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Attempting to change an out of date document\n")),(0,r.kt)("p",null,"If you encounter this you need to clone the original document, the above sample\nwould work as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let doc1 = automerge.init()\nlet doc2 = automerge.change(automerge.clone(doc1), d => (d.key = "value"))\n')),(0,r.kt)("h2",{id:"the-unstable-module"},"The ",(0,r.kt)("a",{parentName:"h2",href:"/docs/tsapi/namespaces/unstable"},"unstable")," module"),(0,r.kt)("p",null,"We are working on some changes to automerge which are not yet complete and\nwill result in backwards incompatible API changes. Once these changes are\nready for production use we will release a new major version of automerge.\nHowever, until that point you can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable"},"unstable")," module to try out\nthe new features, documents from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable"},"unstable")," module are\ninteroperable with documents from the main module. Please see the docs for\nthe ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable"},"unstable")," module for more details."),(0,r.kt)("h2",{id:"namespaces"},"Namespaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/tsapi/namespaces/unstable"},"unstable"))),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/tsapi/classes/Text"},"Text"))),(0,r.kt)("h2",{id:"interfaces"},"Interfaces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/tsapi/interfaces/API"},"API")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/tsapi/interfaces/List"},"List")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/tsapi/interfaces/SyncState"},"SyncState"))),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("h3",{id:"counter"},"Counter"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/classes/unstable.Counter"},"Counter")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"delpatch"},"DelPatch"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#delpatch"},"DelPatch")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"doc"},"Doc"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},"Doc")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"float64"},"Float64"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/classes/unstable.Float64"},"Float64")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"incpatch"},"IncPatch"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#incpatch"},"IncPatch")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"insertpatch"},"InsertPatch"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#insertpatch"},"InsertPatch")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"int"},"Int"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/classes/unstable.Int"},"Int")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"patch"},"Patch"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#patch"},"Patch")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"patchcallback"},"PatchCallback"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#patchcallback"},"PatchCallback")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"putpatch"},"PutPatch"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#putpatch"},"PutPatch")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"splicetextpatch"},"SpliceTextPatch"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#splicetextpatch"},"SpliceTextPatch")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"syncmessage"},"SyncMessage"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#syncmessage"},"SyncMessage")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"uint"},"Uint"),(0,r.kt)("p",null,"Re-exports ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/classes/unstable.Uint"},"Uint")),(0,r.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,r.kt)("h3",{id:"actorid"},"ActorId"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ActorId"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:1"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"applyoptions"},"ApplyOptions"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ApplyOptions"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Options passed to ",(0,r.kt)("a",{parentName:"p",href:"#loadincremental"},"loadIncremental"),", ",(0,r.kt)("a",{parentName:"p",href:"#applychanges"},"applyChanges"),", and ",(0,r.kt)("a",{parentName:"p",href:"#receivesyncmessage"},"receiveSyncMessage")),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of value contained in the document")))),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"patchCallback?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#patchcallback"},(0,r.kt)("inlineCode",{parentName:"a"},"PatchCallback")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L74"},"automerge/javascript/src/stable.ts:74")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"automergevalue"},"AutomergeValue"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"AutomergeValue"),": ",(0,r.kt)("a",{parentName:"p",href:"#scalarvalue"},(0,r.kt)("inlineCode",{parentName:"a"},"ScalarValue"))," ","|"," { ",(0,r.kt)("inlineCode",{parentName:"p"},"[key: string]"),": ",(0,r.kt)("a",{parentName:"p",href:"#automergevalue"},(0,r.kt)("inlineCode",{parentName:"a"},"AutomergeValue")),";  } ","|"," ",(0,r.kt)("a",{parentName:"p",href:"#automergevalue"},(0,r.kt)("inlineCode",{parentName:"a"},"AutomergeValue")),"[] ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/classes/Text"},(0,r.kt)("inlineCode",{parentName:"a"},"Text"))),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/types.ts#L10"},"automerge/javascript/src/types.ts:10")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"change"},"Change"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Change"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:3"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"changefn"},"ChangeFn"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ChangeFn"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": (",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),": ",(0,r.kt)("a",{parentName:"p",href:"#extend"},(0,r.kt)("inlineCode",{parentName:"a"},"Extend")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",") => ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of value contained in the document This function may mutate ",(0,r.kt)("inlineCode",{parentName:"td"},"doc"))))),(0,r.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,r.kt)("p",null,"\u25b8 (",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Function which is called by ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change")," when making changes to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Doc<T>")),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#extend"},(0,r.kt)("inlineCode",{parentName:"a"},"Extend")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L105"},"automerge/javascript/src/stable.ts:105")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"changeoptions"},"ChangeOptions"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ChangeOptions"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Options passed to ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change"),", and ",(0,r.kt)("a",{parentName:"p",href:"#emptychange"},"emptyChange")),(0,r.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of value contained in the document")))),(0,r.kt)("h4",{id:"type-declaration-2"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"message?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A message which describes the changes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"patchCallback?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#patchcallback"},(0,r.kt)("inlineCode",{parentName:"a"},"PatchCallback")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback which will be called to notify the caller of any changes to the document")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"time?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The unix timestamp of the change (purely advisory, not used in conflict resolution)")))),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L62"},"automerge/javascript/src/stable.ts:62")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"conflicts-1"},"Conflicts"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Conflicts"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"The type of conflicts for particular key or index"),(0,r.kt)("p",null,"Maps and sequences in automerge can contain conflicting values for a\nparticular key or index. In this case ",(0,r.kt)("a",{parentName:"p",href:"#getconflicts"},"getConflicts")," can be used to\nobtain a ",(0,r.kt)("inlineCode",{parentName:"p"},"Conflicts")," representing the multiple values present for the property"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Conflicts")," is a map from a unique (per property or index) key to one of\nthe possible conflicting values for the given property."),(0,r.kt)("h4",{id:"index-signature"},"Index signature"),(0,r.kt)("p",null,"\u25aa ","[key: ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"]",": ",(0,r.kt)("a",{parentName:"p",href:"#automergevalue"},(0,r.kt)("inlineCode",{parentName:"a"},"AutomergeValue"))),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L568"},"automerge/javascript/src/stable.ts:568")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"decodedchange"},"DecodedChange"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"DecodedChange"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("h4",{id:"type-declaration-3"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"actor")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#actorid"},(0,r.kt)("inlineCode",{parentName:"a"},"ActorId")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"deps")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"hash")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Hash"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"null"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ops")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Op"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"seq")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"startOp")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"time")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:74"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"decodedsyncmessage"},"DecodedSyncMessage"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"DecodedSyncMessage"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("h4",{id:"type-declaration-4"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"changes")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change")),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"have")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"SyncHave"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"heads")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"need")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads")))))),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:67"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"extend"},"Extend"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Extend"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," extends infer T[] ? ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/List"},(0,r.kt)("inlineCode",{parentName:"a"},"List")),"<",(0,r.kt)("a",{parentName:"p",href:"#extend"},(0,r.kt)("inlineCode",{parentName:"a"},"Extend")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",">"," : ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," extends ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")," ? { ","[P in keyof T]",": Extend<T","[P]",">"," } : ",(0,r.kt)("inlineCode",{parentName:"p"},"T")),(0,r.kt)("p",null,"To extend an arbitrary type, we have to turn any arrays that are part of the type's definition into Lists.\nSo we recurse through the properties of T, turning any Arrays we find into Lists."),(0,r.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L88"},"automerge/javascript/src/stable.ts:88")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"heads"},"Heads"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Heads"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash"),"[]"),(0,r.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:7"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"initoptions"},"InitOptions"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"InitOptions"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Options to be passed to ",(0,r.kt)("a",{parentName:"p",href:"#init"},"init")," or ",(0,r.kt)("a",{parentName:"p",href:"#load"},"load")),(0,r.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value the document contains")))),(0,r.kt)("h4",{id:"type-declaration-5"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"actor?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#actorid"},(0,r.kt)("inlineCode",{parentName:"a"},"ActorId"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The actor ID to use for this document, a random one will be generated if ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," is passed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"freeze?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"patchCallback?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#patchcallback"},(0,r.kt)("inlineCode",{parentName:"a"},"PatchCallback")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A callback which will be called with the initial patch once the document has finished loading")))),(0,r.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L125"},"automerge/javascript/src/stable.ts:125")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"materializevalue"},"MaterializeValue"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"MaterializeValue"),": { ",(0,r.kt)("inlineCode",{parentName:"p"},"[key: string]"),": ",(0,r.kt)("a",{parentName:"p",href:"#materializevalue"},(0,r.kt)("inlineCode",{parentName:"a"},"MaterializeValue")),";  } ","|"," ",(0,r.kt)("a",{parentName:"p",href:"#materializevalue"},(0,r.kt)("inlineCode",{parentName:"a"},"MaterializeValue")),"[] ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Value")),(0,r.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:9"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"objid"},"ObjID"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ObjID"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:2"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"prop"},"Prop"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"Prop"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")),(0,r.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,r.kt)("p",null,"node_modules/@automerge/automerge-wasm/index.d.ts:5"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"scalarvalue"},"ScalarValue"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"ScalarValue"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," ","|"," ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/classes/unstable.Counter"},(0,r.kt)("inlineCode",{parentName:"a"},"Counter"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/types.ts#L17"},"automerge/javascript/src/types.ts:17")),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("h3",{id:"uuid"},"uuid"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,r.kt)("strong",{parentName:"p"},"uuid"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"UUIDFactory")),(0,r.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/uuid.ts#L14"},"automerge/javascript/src/uuid.ts:14")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/uuid.ts#L18"},"automerge/javascript/src/uuid.ts:18")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/uuid.ts#L22"},"automerge/javascript/src/uuid.ts:22")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"applychanges"},"applyChanges"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"applyChanges"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"changes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"opts?"),"): [",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","]"),(0,r.kt)("p",null,"Apply changes received from another document"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"doc")," will be updated to reflect the ",(0,r.kt)("inlineCode",{parentName:"p"},"changes"),". If there are changes which\nwe do not have dependencies for yet those will be stored in the document and\napplied when the depended on changes arrive."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"#applyoptions"},"ApplyOptions")," to pass a patchcallback which will be\ninformed of any changes which occur as a result of applying the changes"),(0,r.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"changes")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#applyoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"ApplyOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"[",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","]"),(0,r.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L696"},"automerge/javascript/src/stable.ts:696")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"change-1"},"change"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"change"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"callback?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Update the contents of an automerge document"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("p",null,"A simple change"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'let doc1 = automerge.init()\ndoc1 = automerge.change(doc1, d => {\n    d.key = "value"\n})\nassert.equal(doc1.key, "value")\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("p",null,"A change with a message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'doc1 = automerge.change(doc1, "add another value", d => {\n    d.key2 = "value2"\n})\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("p",null,"A change with a message and a timestamp"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'doc1 = automerge.change(doc1, {message: "add another value", timestamp: 1640995200}, d => {\n    d.key2 = "value2"\n})\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("p",null,"responding to a patch callback"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'let patchedPath\nlet patchCallback = patch => {\n   patchedPath = patch.path\n}\ndoc1 = automerge.change(doc1, {message, "add another value", timestamp: 1640995200, patchCallback}, d => {\n    d.key2 = "value2"\n})\nassert.equal(patchedPath, ["key2"])\n')),(0,r.kt)("h4",{id:"type-parameters-6"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value contained in the document")))),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The document to update")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#changeoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"ChangeOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#changefn"},(0,r.kt)("inlineCode",{parentName:"a"},"ChangeFn")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Either a message, an ",(0,r.kt)("a",{parentName:"td",href:"#changeoptions"},"ChangeOptions"),", or a ",(0,r.kt)("a",{parentName:"td",href:"#changefn"},"ChangeFn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"callback?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#changefn"},(0,r.kt)("inlineCode",{parentName:"a"},"ChangeFn")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"A ",(0,r.kt)("inlineCode",{parentName:"td"},"ChangeFn")," to be used if ",(0,r.kt)("inlineCode",{parentName:"td"},"options")," was a ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," Note that if the second argument is a function it will be used as the ",(0,r.kt)("inlineCode",{parentName:"td"},"ChangeFn")," regardless of what the third argument is.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L314"},"automerge/javascript/src/stable.ts:314")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"clone"},"clone"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"clone"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_opts?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Make a full writable copy of an automerge document"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.kt)("p",null,"Unlike ",(0,r.kt)("a",{parentName:"p",href:"#view"},"view")," this function makes a full copy of the memory backing\nthe document and can thus be passed to ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change"),". It also generates a\nnew actor ID so that changes made in the new document do not create duplicate\nsequence numbers with respect to the old document. If you need control over\nthe actor ID which is generated you can pass the actor ID as the second\nargument"),(0,r.kt)("h4",{id:"type-parameters-7"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value contained in the document")))),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The document to clone")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"InitOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Either an actor ID to use for the new doc or an ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},"InitOptions"))))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L222"},"automerge/javascript/src/stable.ts:222")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"emptychange"},"emptyChange"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"emptyChange"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Make a change to a document which does not modify the document"),(0,r.kt)("h4",{id:"type-parameters-8"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The doc to add the empty change to")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},"void")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#changeoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"ChangeOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Either a message or a ",(0,r.kt)("a",{parentName:"td",href:"#changeoptions"},"ChangeOptions")," for the new change Why would you want to do this? One reason might be that you have merged changes from some other peers and you want to generate a change which depends on those merged changes so that you can sign the new change with all of the merged changes as part of the new change.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L402"},"automerge/javascript/src/stable.ts:402")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"free"},"free"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"free"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Explicity free the memory backing a document. Note that this is note\nnecessary in environments which support\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry"},(0,r.kt)("inlineCode",{parentName:"a"},"FinalizationRegistry"))),(0,r.kt)("h4",{id:"type-parameters-9"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L241"},"automerge/javascript/src/stable.ts:241")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"from"},"from"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"from"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"initialState"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_opts?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Create an automerge document from a POJO"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'const doc = automerge.from({\n    tasks: [\n        {description: "feed dogs", done: false}\n    ]\n})\n')),(0,r.kt)("h4",{id:"type-parameters-10"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"unknown"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value passed to ",(0,r.kt)("inlineCode",{parentName:"td"},"from")," ",(0,r.kt)("em",{parentName:"td"},"and")," the type the resulting document will contain")))),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"initialState")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The initial state which will be copied into the document")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"InitOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L261"},"automerge/javascript/src/stable.ts:261")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getactorid"},"getActorId"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getActorId"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("a",{parentName:"p",href:"#actorid"},(0,r.kt)("inlineCode",{parentName:"a"},"ActorId"))),(0,r.kt)("p",null,"Get the actor ID associated with the document"),(0,r.kt)("h4",{id:"type-parameters-11"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#actorid"},(0,r.kt)("inlineCode",{parentName:"a"},"ActorId"))),(0,r.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L553"},"automerge/javascript/src/stable.ts:553")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getallchanges"},"getAllChanges"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getAllChanges"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("a",{parentName:"p",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change")),"[]"),(0,r.kt)("p",null,"Get all the changes in a document"),(0,r.kt)("p",null,"This is different to ",(0,r.kt)("a",{parentName:"p",href:"#save"},"save")," because the output is an array of changes\nwhich can be individually applied via ",(0,r.kt)("a",{parentName:"p",href:"#applychanges"},"applyChanges"),"`"),(0,r.kt)("h4",{id:"type-parameters-12"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change")),"[]"),(0,r.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L680"},"automerge/javascript/src/stable.ts:680")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getchanges"},"getChanges"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getChanges"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"oldState"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"newState"),"): ",(0,r.kt)("a",{parentName:"p",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change")),"[]"),(0,r.kt)("p",null,"Get the changes which are in ",(0,r.kt)("inlineCode",{parentName:"p"},"newState")," but not in ",(0,r.kt)("inlineCode",{parentName:"p"},"oldState"),". The returned\nchanges can be loaded in ",(0,r.kt)("inlineCode",{parentName:"p"},"oldState")," via ",(0,r.kt)("a",{parentName:"p",href:"#applychanges"},"applyChanges"),"."),(0,r.kt)("p",null,"Note that this will crash if there are changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"oldState")," which are not in ",(0,r.kt)("inlineCode",{parentName:"p"},"newState"),"."),(0,r.kt)("h4",{id:"type-parameters-13"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"oldState")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"newState")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change")),"[]"),(0,r.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L668"},"automerge/javascript/src/stable.ts:668")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getconflicts"},"getConflicts"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getConflicts"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"prop"),"): ",(0,r.kt)("a",{parentName:"p",href:"#conflicts"},(0,r.kt)("inlineCode",{parentName:"a"},"Conflicts"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")),(0,r.kt)("p",null,"Get the conflicts associated with a property"),(0,r.kt)("p",null,'The values of properties in a map in automerge can be conflicted if there\nare concurrent "put" operations to the same key. Automerge chooses one value\narbitrarily (but deterministically, any two nodes who have the same set of\nchanges will choose the same value) from the set of conflicting values to\npresent as the value of the key.'),(0,r.kt)("p",null,"Sometimes you may want to examine these conflicts, in this case you can use\n",(0,r.kt)("a",{parentName:"p",href:"#getconflicts"},"getConflicts")," to get the conflicts for the key."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import * as automerge from "@automerge/automerge"\n\ntype Profile = {\n    pets: Array<{name: string, type: string}>\n}\n\nlet doc1 = automerge.init<Profile>("aaaa")\ndoc1 = automerge.change(doc1, d => {\n    d.pets = [{name: "Lassie", type: "dog"}]\n})\nlet doc2 = automerge.init<Profile>("bbbb")\ndoc2 = automerge.merge(doc2, automerge.clone(doc1))\n\ndoc2 = automerge.change(doc2, d => {\n    d.pets[0].name = "Beethoven"\n})\n\ndoc1 = automerge.change(doc1, d => {\n    d.pets[0].name = "Babe"\n})\n\nconst doc3 = automerge.merge(doc1, doc2)\n\n// Note that here we pass `doc3.pets`, not `doc3`\nlet conflicts = automerge.getConflicts(doc3.pets[0], "name")\n\n// The two conflicting values are the keys of the conflicts object\nassert.deepEqual(Object.values(conflicts), ["Babe", Beethoven"])\n')),(0,r.kt)("h4",{id:"type-parameters-14"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"prop")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#prop"},(0,r.kt)("inlineCode",{parentName:"a"},"Prop")))))),(0,r.kt)("h4",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#conflicts"},(0,r.kt)("inlineCode",{parentName:"a"},"Conflicts"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")),(0,r.kt)("h4",{id:"defined-in-26"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L614"},"automerge/javascript/src/stable.ts:614")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getheads"},"getHeads"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getHeads"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("a",{parentName:"p",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads"))),(0,r.kt)("p",null,"Get the hashes of the heads of this document"),(0,r.kt)("h4",{id:"type-parameters-15"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads"))),(0,r.kt)("h4",{id:"defined-in-27"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L889"},"automerge/javascript/src/stable.ts:889")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getlastlocalchange"},"getLastLocalChange"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getLastLocalChange"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("a",{parentName:"p",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")),(0,r.kt)("p",null,"Get the binary representation of the last change which was made to this doc"),(0,r.kt)("p",null,"This is most useful when staying in sync with other peers, every time you\nmake a change locally via ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change")," you immediately call ",(0,r.kt)("a",{parentName:"p",href:"#getlastlocalchange"},"getLastLocalChange")," and send the result over the network to other peers."),(0,r.kt)("h4",{id:"type-parameters-16"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")))),(0,r.kt)("h4",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#change"},(0,r.kt)("inlineCode",{parentName:"a"},"Change"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")),(0,r.kt)("h4",{id:"defined-in-28"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L637"},"automerge/javascript/src/stable.ts:637")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getmissingdeps"},"getMissingDeps"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getMissingDeps"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"heads"),"): ",(0,r.kt)("a",{parentName:"p",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads"))),(0,r.kt)("p",null,"Get any changes in ",(0,r.kt)("inlineCode",{parentName:"p"},"doc")," which are not dependencies of ",(0,r.kt)("inlineCode",{parentName:"p"},"heads")),(0,r.kt)("h4",{id:"type-parameters-17"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"heads")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads")))))),(0,r.kt)("h4",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads"))),(0,r.kt)("h4",{id:"defined-in-29"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L881"},"automerge/javascript/src/stable.ts:881")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getobjectid"},"getObjectId"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getObjectId"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"prop?"),"): ",(0,r.kt)("a",{parentName:"p",href:"#objid"},(0,r.kt)("inlineCode",{parentName:"a"},"ObjID"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("p",null,"Return the object ID of an arbitrary javascript value"),(0,r.kt)("p",null,"This is useful to determine if something is actually an automerge document,\nif ",(0,r.kt)("inlineCode",{parentName:"p"},"doc")," is not an automerge document this will return null."),(0,r.kt)("h4",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"any"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"prop?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#prop"},(0,r.kt)("inlineCode",{parentName:"a"},"Prop")))))),(0,r.kt)("h4",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#objid"},(0,r.kt)("inlineCode",{parentName:"a"},"ObjID"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"null")),(0,r.kt)("h4",{id:"defined-in-30"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L649"},"automerge/javascript/src/stable.ts:649")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"init"},"init"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"init"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"_opts?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Create a new automerge document"),(0,r.kt)("h4",{id:"type-parameters-18"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of value contained in the document. This will be the type that is passed to the change closure in ",(0,r.kt)("a",{parentName:"td",href:"#change-1"},"change"))))),(0,r.kt)("h4",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"InitOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Either an actorId or an ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},"InitOptions")," (which may contain an actorId). If this is null the document will be initialised with a random actor ID")))),(0,r.kt)("h4",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-31"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L157"},"automerge/javascript/src/stable.ts:157")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"isautomerge"},"isAutomerge"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"isAutomerge"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h4",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown"))))),(0,r.kt)("h4",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h4",{id:"defined-in-32"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L909"},"automerge/javascript/src/stable.ts:909")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"load"},"load"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"load"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_opts?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Load an automerge document from a compressed document produce by ",(0,r.kt)("a",{parentName:"p",href:"#save"},"save")),(0,r.kt)("h4",{id:"type-parameters-19"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value which is contained in the document. Note that no validation is done to make sure this type is in fact the type of the contained value so be a bit careful")))),(0,r.kt)("h4",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The compressed document")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"_opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"InitOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Either an actor ID or some ",(0,r.kt)("a",{parentName:"td",href:"#initoptions"},"InitOptions"),", if the actor ID is null a random actor ID will be created Note that ",(0,r.kt)("inlineCode",{parentName:"td"},"load")," will throw an error if passed incomplete content (for example if you are receiving content over the network and don't know if you have the complete document yet). If you need to handle incomplete content use ",(0,r.kt)("a",{parentName:"td",href:"#init"},"init")," followed by ",(0,r.kt)("a",{parentName:"td",href:"#loadincremental"},"loadIncremental"),".")))),(0,r.kt)("h4",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-33"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L444"},"automerge/javascript/src/stable.ts:444")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"loadincremental"},"loadIncremental"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"loadIncremental"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"opts?"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Load changes produced by saveIncremental, or partial changes"),(0,r.kt)("h4",{id:"type-parameters-20"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value which is contained in the document. Note that no validation is done to make sure this type is in fact the type of the contained value so be a bit careful")))),(0,r.kt)("h4",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"data")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The compressedchanges")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#applyoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"ApplyOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"an ",(0,r.kt)("a",{parentName:"td",href:"#applyoptions"},"ApplyOptions")," This function is useful when staying up to date with a connected peer. Perhaps the other end sent you a full compresed document which you loaded with ",(0,r.kt)("a",{parentName:"td",href:"#load"},"load")," and they're sending you the result of ",(0,r.kt)("a",{parentName:"td",href:"#getlastlocalchange"},"getLastLocalChange")," every time they make a change. Note that this function will succesfully load the results of ",(0,r.kt)("a",{parentName:"td",href:"#save"},"save")," as well as ",(0,r.kt)("a",{parentName:"td",href:"#getlastlocalchange"},"getLastLocalChange")," or any other incremental change.")))),(0,r.kt)("h4",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-34"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L487"},"automerge/javascript/src/stable.ts:487")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"merge"},"merge"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"merge"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"local"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remote"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Merge ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," into ",(0,r.kt)("inlineCode",{parentName:"p"},"remote")),(0,r.kt)("h4",{id:"type-parameters-21"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of values contained in each document")))),(0,r.kt)("h4",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"local")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The document to merge changes into")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"remote")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The document to merge changes from")))),(0,r.kt)("h4",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The merged document")),(0,r.kt)("p",null,"Often when you are merging documents you will also need to clone them. Both\narguments to ",(0,r.kt)("inlineCode",{parentName:"p"},"merge")," are frozen after the call so you can no longer call\nmutating methods (such as ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change"),') on them. The symtom of this will be\nan error which says "Attempting to change an out of date document". To\novercome this call ',(0,r.kt)("a",{parentName:"p",href:"#clone"},"clone")," on the argument before passing it to ",(0,r.kt)("a",{parentName:"p",href:"#merge"},"merge"),"."),(0,r.kt)("h4",{id:"defined-in-35"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L535"},"automerge/javascript/src/stable.ts:535")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"save"},"save"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"save"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("p",null,"Export the contents of a document to a compressed format"),(0,r.kt)("h4",{id:"type-parameters-22"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-20"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The doc to save The returned bytes can be passed to ",(0,r.kt)("a",{parentName:"td",href:"#load"},"load")," or ",(0,r.kt)("a",{parentName:"td",href:"#loadincremental"},"loadIncremental"))))),(0,r.kt)("h4",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("h4",{id:"defined-in-36"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L516"},"automerge/javascript/src/stable.ts:516")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"view"},"view"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"view"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"heads"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("p",null,"Make an immutable view of an automerge document as at ",(0,r.kt)("inlineCode",{parentName:"p"},"heads")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Remarks"))),(0,r.kt)("p",null,"The document returned from this function cannot be passed to ",(0,r.kt)("a",{parentName:"p",href:"#change-1"},"change"),".\nThis is because it shares the same underlying memory as ",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", but it is\nconsequently a very cheap copy."),(0,r.kt)("p",null,"Note that this function will throw an error if any of the hashes in ",(0,r.kt)("inlineCode",{parentName:"p"},"heads"),"\nare not in the document."),(0,r.kt)("h4",{id:"type-parameters-23"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of the value contained in the document")))),(0,r.kt)("h4",{id:"parameters-21"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The document to create a view of")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"heads")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"#heads"},(0,r.kt)("inlineCode",{parentName:"a"},"Heads"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The hashes of the heads to create a view at")))),(0,r.kt)("h4",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">"),(0,r.kt)("h4",{id:"defined-in-37"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L197"},"automerge/javascript/src/stable.ts:197")),(0,r.kt)("h2",{id:"sync"},"sync"),(0,r.kt)("h3",{id:"decodesyncstate"},"decodeSyncState"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"decodeSyncState"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState"))),(0,r.kt)("p",null,"Decode some binary data into a ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")),(0,r.kt)("h4",{id:"parameters-22"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array"))))),(0,r.kt)("h4",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState"))),(0,r.kt)("h4",{id:"defined-in-38"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L771"},"automerge/javascript/src/stable.ts:771")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"encodesyncstate"},"encodeSyncState"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"encodeSyncState"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("p",null,"encode a ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")," into binary to send over the network"),(0,r.kt)("h4",{id:"parameters-23"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"state")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState")))))),(0,r.kt)("h4",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Uint8Array")),(0,r.kt)("h4",{id:"defined-in-39"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L759"},"automerge/javascript/src/stable.ts:759")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"generatesyncmessage"},"generateSyncMessage"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"generateSyncMessage"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"inState"),"): [",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState")),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#syncmessage"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncMessage"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"]"),(0,r.kt)("p",null,"Generate a sync message to send to the peer represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"inState")),(0,r.kt)("h4",{id:"type-parameters-24"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-24"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The doc to generate messages about")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"inState")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ",(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")," representing the peer we are talking to")))),(0,r.kt)("h4",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,"[",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState")),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#syncmessage"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncMessage"))," ","|"," ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"]"),(0,r.kt)("p",null,"An array of ",(0,r.kt)("inlineCode",{parentName:"p"},"[newSyncState, syncMessage | null]")," where\n",(0,r.kt)("inlineCode",{parentName:"p"},"newSyncState")," should replace ",(0,r.kt)("inlineCode",{parentName:"p"},"inState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"syncMessage")," should be sent to\nthe peer if it is not null. If ",(0,r.kt)("inlineCode",{parentName:"p"},"syncMessage")," is null then we are up to date."),(0,r.kt)("h4",{id:"defined-in-40"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L789"},"automerge/javascript/src/stable.ts:789")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"initsyncstate"},"initSyncState"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"initSyncState"),"(): ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState"))),(0,r.kt)("p",null,"Create a new, blank ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")),(0,r.kt)("p",null,"When communicating with a peer for the first time use this to generate a new\n",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")," for them"),(0,r.kt)("h4",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState"))),(0,r.kt)("h4",{id:"defined-in-41"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L854"},"automerge/javascript/src/stable.ts:854")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"receivesyncmessage"},"receiveSyncMessage"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"receiveSyncMessage"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"inState"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"opts?"),"): [",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",", ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"]"),(0,r.kt)("p",null,"Update a document and our sync state on receiving a sync message"),(0,r.kt)("h4",{id:"type-parameters-25"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T"))))),(0,r.kt)("h4",{id:"parameters-25"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"doc")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The doc the sync message is about")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"inState")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ",(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/interfaces/SyncState"},"SyncState")," for the peer we are communicating with")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Uint8Array")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The message which was received")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"opts?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/docs/tsapi/namespaces/unstable#applyoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"ApplyOptions")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Any ApplyOptions, used for passing a ",(0,r.kt)("a",{parentName:"td",href:"#patchcallback"},"PatchCallback")," which will be informed of any changes in ",(0,r.kt)("inlineCode",{parentName:"td"},"doc")," which occur because of the received sync message.")))),(0,r.kt)("h4",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,"[",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/namespaces/unstable#doc"},(0,r.kt)("inlineCode",{parentName:"a"},"Doc")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">",", ",(0,r.kt)("a",{parentName:"p",href:"/docs/tsapi/interfaces/SyncState"},(0,r.kt)("inlineCode",{parentName:"a"},"SyncState")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"]"),(0,r.kt)("p",null,"An array of ",(0,r.kt)("inlineCode",{parentName:"p"},"[newDoc, newSyncState, syncMessage | null]")," where\n",(0,r.kt)("inlineCode",{parentName:"p"},"newDoc")," is the updated state of ",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"newSyncState")," should replace\n",(0,r.kt)("inlineCode",{parentName:"p"},"inState")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"syncMessage")," should be sent to the peer if it is not null. If\n",(0,r.kt)("inlineCode",{parentName:"p"},"syncMessage")," is null then we are up to date."),(0,r.kt)("h4",{id:"defined-in-42"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/blob/89a08662/javascript/src/stable.ts#L817"},"automerge/javascript/src/stable.ts:817")))}s.isMDXComponent=!0}}]);