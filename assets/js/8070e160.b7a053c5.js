"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2651],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},4132:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return S},default:function(){return Z},frontMatter:function(){return D},metadata:function(){return I},toc:function(){return M}});var a=n(7462),r=n(3366),o=n(7294),i=n(3905);var l=n(2389),c=n(9443);var s=function(){var e=(0,o.useContext)(c.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=n(9521),p=n(6010),m={tabItem:"tabItem_vU9c"};function d(e){var t,n,a,r=e.lazy,i=e.block,l=e.defaultValue,c=e.values,d=e.groupId,g=e.className,h=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=c?c:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),k=(0,u.lx)(f,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===l?l:null!=(t=null!=l?l:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=h[0])?void 0:a.props.value;if(null!==v&&!f.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=s(),b=y.tabGroupChoices,w=y.setTabGroupChoices,N=(0,o.useState)(v),j=N[0],C=N[1],T=[],A=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var x=b[d];null!=x&&x!==j&&f.some((function(e){return e.value===x}))&&C(x)}var E=function(e){var t=e.currentTarget,n=T.indexOf(t),a=f[n].value;a!==j&&(A(t),C(a),null!=d&&w(d,a))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var r=T.indexOf(e.currentTarget)-1;n=T[r]||T[T.length-1]}null==(t=n)||t.focus()};return o.createElement("div",{className:"tabs-container"},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":i},g)},f.map((function(e){var t=e.value,n=e.label;return o.createElement("li",{role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,className:(0,p.Z)("tabs__item",m.tabItem,{"tabs__item--active":j===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:O,onFocus:E,onClick:E},null!=n?n:t)}))),r?(0,o.cloneElement)(h.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}function g(e){var t=(0,l.Z)();return o.createElement(d,(0,a.Z)({key:String(t)},e))}var h=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)},f=["components"],k={toc:[]},v="wrapper";function y(e){var t=e.components,n=(0,r.Z)(e,f);return(0,i.kt)(v,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Enable the ",(0,i.kt)("inlineCode",{parentName:"p"},"asyncWebAssembly"),"\n",(0,i.kt)("a",{parentName:"p",href:"https://webpack.js.org/configuration/experiments/"},"experiment"),". For example:"),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"webpack.config.js")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const path = require('path');\n\nmodule.exports = {\n  experiments: { asyncWebAssembly: true },\n  target: 'web',\n  entry: './src/index.js',\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'public'),\n  },\n  mode: \"development\", // or production\n  performance: {       // we dont want the wasm blob to generate warnings\n     hints: false,\n     maxEntrypointSize: 512000,\n     maxAssetSize: 512000\n  }\n};\n")))}y.isMDXComponent=!0;var b=["components"],w={toc:[]},N="wrapper";function j(e){var t=e.components,n=(0,r.Z)(e,b);return(0,i.kt)(N,(0,a.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There are three things you need to do to get WASM packaging working with vite:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Install the top level await plugin"),(0,i.kt)("li",{parentName:"ol"},"Install the ",(0,i.kt)("inlineCode",{parentName:"li"},"vite-plugin-wasm")," plugin"),(0,i.kt)("li",{parentName:"ol"},"Exclude ",(0,i.kt)("inlineCode",{parentName:"li"},"automerge-wasm")," from the optimizer")),(0,i.kt)("p",null,"First, install the packages we need:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add vite-plugin-top-level-await\nyarn add vite-plugin-wasm\n")),(0,i.kt)("p",null,"In ",(0,i.kt)("inlineCode",{parentName:"p"},"vite.config.js")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { defineConfig } from "vite"\nimport wasm from "vite-plugin-wasm"\nimport topLevelAwait from "vite-plugin-top-level-await"\n\nexport default defineConfig({\n    plugins: [topLevelAwait(), wasm()],\n    \n    // This is only necessary if you are using `SharedWorker` or `WebWorker`, as \n    // documented in https://vitejs.dev/guide/features.html#import-with-constructors\n    worker: { \n        format: "es",\n        plugins: [topLevelAwait(), wasm()] \n    },\n\n    optimizeDeps: {\n        // This is necessary because otherwise `vite dev` includes two separate\n        // versions of the JS wrapper. This causes problems because the JS\n        // wrapper has a module level variable to track JS side heap\n        // allocations, initializing this twice causes horrible breakage\n        exclude: ["@automerge/automerge-wasm"]\n    }\n})\n')))}j.isMDXComponent=!0;var C=["components"],T={toc:[]},A="wrapper";function x(e){var t=e.components,n=(0,r.Z)(e,C);return(0,i.kt)(A,(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Assuming you have already run ",(0,i.kt)("inlineCode",{parentName:"p"},"create-react-app")," and your working directory is\nthe project."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add craco craco-wasm\n")),(0,i.kt)("p",null,"Modify ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," to use ",(0,i.kt)("inlineCode",{parentName:"p"},"craco")," for scripts. In ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," the\n",(0,i.kt)("inlineCode",{parentName:"p"},"scripts")," section will look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  "scripts": {\n    "start": "create-react-app start",\n    "build": "create-react-app build",\n    "test": "create-react-app test",\n    "eject": "create-react-app eject"\n  },\n')),(0,i.kt)("p",null,"Replace that section with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  "scripts": {\n    "start": "craco start",\n    "build": "craco build",\n    "test": "craco test",\n    "eject": "craco eject"\n  },\n')),(0,i.kt)("p",null,"In the root of the project add the following contents to ",(0,i.kt)("inlineCode",{parentName:"p"},"craco.config.js")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const cracoWasm = require("craco-wasm")\n\nmodule.exports = {\n    plugins: [cracoWasm()]\n}\n')))}function E(e){return function(e){if(null==e)throw new TypeError("Cannot destructure undefined")}(e),[o.createElement(g,null,o.createElement(h,{value:"webpack",label:"Webpack 5"},o.createElement(y,null)),o.createElement(h,{value:"vite",label:"Vite"},o.createElement(j,null)),o.createElement(h,{value:"cra",label:"Create React App"},o.createElement(x,null)))]}x.isMDXComponent=!0;var O=["components"],D={sidebar_position:1},S="5-Minute Quick Start",I={unversionedId:"quickstart",id:"quickstart",isDocsHomePage:!1,title:"5-Minute Quick Start",description:"This guide will get you up and running with Automerge in a JavaScript or TypeScript application. This guide is recommended for you if you have strong understanding of JavaScript fundamentals and CRDTs. If you find this quick start to be complicated, we recommend trying the Tutorial section.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/docs/quickstart",editUrl:"https://github.com/automerge/automerge.github.io/edit/main/docs/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Welcome to Automerge",permalink:"/docs/hello"},next:{title:"Introduction",permalink:"/docs/tutorial/introduction"}},M=[{value:"Setup",id:"setup",children:[],level:2},{value:"Creating a document",id:"creating-a-document",children:[],level:2},{value:"Making changes",id:"making-changes",children:[],level:2},{value:"Merging documents",id:"merging-documents",children:[],level:2},{value:"Get change history",id:"get-change-history",children:[],level:2},{value:"More",id:"more",children:[],level:2}],P={toc:M},q="wrapper";function Z(e){var t=e.components,n=(0,r.Z)(e,O);return(0,i.kt)(q,(0,a.Z)({},P,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"5-minute-quick-start"},"5-Minute Quick Start"),(0,i.kt)("p",null,"This guide will get you up and running with Automerge in a JavaScript or TypeScript application. This guide is recommended for you if you have strong understanding of JavaScript fundamentals and CRDTs. If you find this quick start to be complicated, we recommend trying the ",(0,i.kt)("a",{parentName:"p",href:"/docs/tutorial/introduction/"},"Tutorial")," section."),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Installation from ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/automerge"},"npm"),", using Node.js:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @automerge/automerge ## or yarn add @automerge/automerge\n")),(0,i.kt)("p",null,"Then load the library as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const Automerge = require('@automerge/automerge')\n")),(0,i.kt)("p",null,"If you are using ES2015 or TypeScript, import the library like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as Automerge from '@automerge/automerge'\n")),(0,i.kt)("p",null,"If you are in a browser you will need to setup a bundler to load WebAssembly modules, examples for three common examples are given below (more detailed working examples available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/automerge/automerge-rs/tree/main/javascript/examples"},"in the repo"),"):"),(0,i.kt)(E,{mdxType:"Bundlers"}),(0,i.kt)("h2",{id:"creating-a-document"},"Creating a document"),(0,i.kt)("p",null,"Let's say doc1 is the application state on device 1. Further down we'll simulate a second device. We initialize the document to initially contain an empty list of cards."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let doc1 = Automerge.init()\n")),(0,i.kt)("p",null,"Automerge follows good functional programming practice. The ",(0,i.kt)("inlineCode",{parentName:"p"},"doc1")," object is treated as immutable -- you  never change it directly. To change it, you need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"Automerge.change()")," with a callback in which you can mutate the state. "),(0,i.kt)("h2",{id:"making-changes"},"Making changes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"doc1 = Automerge.change(doc1, 'Add card', doc => {\n  doc.cards = []\n  doc.cards.push({ title: 'Rewrite everything in Clojure', done: false })\n  doc.cards.push({ title: 'Rewrite everything in Haskell', done: false })\n})\n// { cards: [\n//    { title: 'Rewrite everything in Clojure', done: false },\n//    { title: 'Rewrite everything in Haskell', done: false } ]}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Automerge.change(doc, [message], changeFn)")," enables you to modify an Automerge document ",(0,i.kt)("inlineCode",{parentName:"p"},"doc"),",\nreturning an updated copy of the document."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," argument is optional. It allows you to attach an arbitrary string to the change, which is not interpreted by Automerge, but saved as part of the change history."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"doc1")," returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"Automerge.change()")," is a regular JavaScript object containing all the\nedits you made in the callback. Any parts of the document that you didn't change are carried over\nunmodified. The only special things about it are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is treated as immutable, so all changes must go through ",(0,i.kt)("inlineCode",{parentName:"li"},"Automerge.change()"),"."),(0,i.kt)("li",{parentName:"ul"},"Every object has a unique ID, which you can get by passing the object to the\n",(0,i.kt)("inlineCode",{parentName:"li"},"Automerge.getObjectId()")," function. This ID is used by Automerge to track which object is which."),(0,i.kt)("li",{parentName:"ul"},"Objects also have information about ",(0,i.kt)("em",{parentName:"li"},"conflicts"),", which is used when several users make changes to\nthe same property concurrently (see ",(0,i.kt)("a",{parentName:"li",href:"/docs/cookbook/conflicts/"},"conflicts"),"). ")),(0,i.kt)("h2",{id:"merging-documents"},"Merging documents"),(0,i.kt)("p",null,"Now let's simulate another device, whose application state is ",(0,i.kt)("inlineCode",{parentName:"p"},"doc2"),". We must\ninitialise it separately, and merge ",(0,i.kt)("inlineCode",{parentName:"p"},"doc1")," into it. After merging, ",(0,i.kt)("inlineCode",{parentName:"p"},"doc2")," is a replicated copy of ",(0,i.kt)("inlineCode",{parentName:"p"},"doc1"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let doc2 = Automerge.init()\ndoc2 = Automerge.merge(doc2, doc1)\n")),(0,i.kt)("p",null,"You can also load the document as a binary, if you want to send the document over the network in a compact format, or if you want to save the document to disk."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let binary = Automerge.save(doc1)\nlet doc2 = Automerge.load(binary)\n")),(0,i.kt)("p",null,"Now, when both documents are ready, we make separate (non-conflicting) changes. For handling conflicting changes, see the section on ",(0,i.kt)("a",{parentName:"p",href:"/docs/cookbook/conflicts/"},"conflicts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"doc1 = Automerge.change(doc1, 'Mark card as done', doc => {\n  doc.cards[0].done = true\n})\ndoc2 = Automerge.change(doc2, 'Delete card', doc => {\n  delete doc.cards[1]\n})\n")),(0,i.kt)("p",null,"Now comes the moment of truth. Let's merge the changes again. You can also do the merge the other way around, and you'll get the same result. Order doesn't matter here. The merged result remembers that 'Rewrite everything in Clojure' was set to true, and that 'Rewrite everything in Haskell' was deleted:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"let finalDoc = Automerge.merge(doc1, doc2)\n// { cards: [ { title: 'Rewrite everything in Clojure', done: true } ] }\n")),(0,i.kt)("h2",{id:"get-change-history"},"Get change history"),(0,i.kt)("p",null,'As our final trick, we can inspect the change history. Automerge automatically\nkeeps track of every change, along with the "commit message" that you passed to\nchange(). When you query that history, it includes both changes you made\nlocally, and also changes that came from other devices. You can also see a\nsnapshot of the application state at any moment in time in the past. For\nexample, we can count how many cards there were at each point:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"Automerge.getHistory(finalDoc).map(state => [state.change.message, state.snapshot.cards.length])\n// [ [ 'Add card', 2 ],\n//   [ 'Mark card as done', 2 ],\n//   [ 'Delete card', 1 ] ]\n")),(0,i.kt)("h2",{id:"more"},"More"),(0,i.kt)("p",null,"If you're hungry for more, look in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/cookbook/modeling-data/"},"Cookbook")," section."))}Z.isMDXComponent=!0}}]);