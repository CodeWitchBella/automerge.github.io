"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[353],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,y=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(y,c(c({ref:t},u),{},{components:n})):r.createElement(y,c({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5732:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],s={sidebar_position:7},i="Multi-user apps",l={unversionedId:"tutorial/sync-changes",id:"tutorial/sync-changes",isDocsHomePage:!1,title:"Multi-user apps",description:"Until now, you've built an Automerge application for a single user only. Are you ready to add multi-user collaboration?",source:"@site/docs/tutorial/sync-changes.md",sourceDirName:"tutorial",slug:"/tutorial/sync-changes",permalink:"/docs/docs/tutorial/sync-changes",editUrl:"https://github.com/automerge/docs/tree/main/docs/docs/tutorial/sync-changes.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Save and Load",permalink:"/docs/docs/tutorial/save-and-load"},next:{title:"Values",permalink:"/docs/docs/types/values"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"multi-user-apps"},"Multi-user apps"),(0,a.kt)("p",null,"Until now, you've built an Automerge application for a single user only. Are you ready to add multi-user collaboration?"),(0,a.kt)("p",null,"In this tutorial, we will use a BroadcastChannel, which allows you to simulate a local area network. All tabs and windows on the same domain in the browser will be able to send and receive messages from each other. In a production application, you could use a WebSocket server or WebRTC server. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let docId = window.location.hash\nlet channel = new BroadcastChannel(docId)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"channel.onmessage = function (ev) {\n    let payload = ev.data\n\n    // this message is from the same actor, ignore it\n    if (payload.actorId === Automerge.getActorId(doc)) return \n    let [ newDoc, newSyncState,  ] = Automerge.receiveSyncMessage(doc, syncState, payload.msg)\n    doc = newDoc\n    syncState = newSyncState\n    updatePeers(doc)\n    save(doc)\n}\n\n// typically, you'd have one sync state for each peer\nlet syncState = Automerge.initSyncState()\n\nfunction updatePeers (doc) {\n    let actorId = Automerge.getActorId(doc)\n    let [nextSyncState, msg] = Automerge.generateSyncMessage(\n        doc, \n        syncState\n    )\n    syncState = nextSyncState\n    if (msg) {\n        channel.postMessage({\n            actorId,\n            msg: msg\n        })\n    }\n}\n")),(0,a.kt)("p",null,"For more information about the sync protocol, and a more advanced example for multiple peers, see the ",(0,a.kt)("a",{parentName:"p",href:"docs/cookbook/real-time"},"Cookbook"),"."))}d.isMDXComponent=!0}}]);